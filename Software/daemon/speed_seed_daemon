#!/usr/bin/env python
import argparse
import serial.tools.list_ports
import time
import pymongo
import json
import datetime
import codecs
import sys 
import logging
import logging.handlers

from pymongo import MongoClient
from datetime import datetime
#import daemon 


def findArduino():
    ports = list(serial.tools.list_ports.comports())
    for p in ports:
        print(p)
        if "Arduino" in p[1]:
            return p
        if "Generic CDC" in p[1]:
            return p

def arduinoReset():
    global arduino
    global current_status
    arduino.close()
    arduino_port = findArduino()

    print("Reseting to arduino")
    print(arduino_port[0])
    arduino = serial.Serial(arduino_port[0], 1200, timeout=1)
    arduino.close()
    arduinoConnect()
    expected_status = getExpectedStatus()
    
    setExpectedStatus(expected_status, current_status)

def getStatus(current_status):
    global db
    global arduino
    global attemps
    message = "PRINT=" + '\n'
    arduino.write(message.encode('ascii') )
    time.sleep(0.5)
    data = arduino.readline()
    if(attemps > 0):
        print(attemps , data)
    attemps += 1
    while data and len(data)>0:
        attemps = 0
        try:
            json_data=json.loads(data.decode('ascii'))
            if ('status' in json_data):
                now = datetime.utcnow()
                status = json_data['status']
                status['timestamp'] = now
                db.sensors.insert(status)
                current_status.update(status)
                print(str(current_status))
                logging.info(str(current_status))
            elif('ERROR' in json_data):
                now = datetime.utcnow()
                status = json_data['ERROR']
                json_data['timestamp'] = now
                db.errors.insert(json_data)
                logging.info(json_data)
            else:
                print(str(json_data))
                logging.info(str(json_data))
        except:
            print("Couldnt parse:" + str(data))

            tmp_error = {
                "ERROR": "Unable to parse " + str(data),
                "timestamp" : datetime.utcnow()
            }
            db.errors.insert(tmp_error)
            logging.info(tmp_error)
            pass
        data = arduino.readline()
    if (attemps > 3):
        arduinoReset()

def getExpectedStatus():
    global db
    last_settings = db.settings.find().sort([("timestamp", pymongo.DESCENDING)]).limit(1)
    now_t = datetime.utcnow()
    now = now_t.hour * 100 + now_t.minute
    ret = {}
    try:
        settings    = last_settings.next()
        #print(str(settings))
        temperature = settings["temperature"]
        humidity    = settings["humidity"]
        light       = settings["light"]
        for t in temperature:
            t["start_time"] = t["start_min"]  + (100 * t["start_hour"])
            t["end_time"] = t["end_min"] + (100 * t["end_hour"])
            if t["start_time"] <= now <= t["end_time"]:
                ret["max_tmp"] = t["max"]
        for h in humidity:
            h["start_time"] = h["start_min"] + (100 * h["start_hour"])
            h["end_time"] = h["end_min"] + (100 * h["end_hour"])
            if h["start_time"] <= now <= h["end_time"]:
                ret["max_humidity"] = h["max"]
        for h in light:
            h["start_time"] = h["start_min"] + (100 * h["start_hour"])
            h["end_time"] = h["end_min"] + (100 * h["end_hour"])
            if h["start_time"] <= now <= h["end_time"]:
                ret["light"] = h["max"]

    except StopIteration:
        global default_settings
        default_settings['timestamp'] = now
        db.settings.insert(default_settings)
    return ret

def setArduinoProperty(setting, value):
    message =  setting + "=" + str(value) + '\n'
    print(message)
    arduino.write(message.encode('ascii') )
    time.sleep(0.5)

def setExpectedStatus(expected, current):
    changed = False
    for prop in ["max_tmp", "max_humidity", "light"]:
        if(current[prop] != expected[prop]):
            setArduinoProperty(prop, expected[prop])
            changed = True
    if changed:
        getStatus(current)

def arduinoConnect():
    global arduino
    arduino_port = findArduino()

    print("Connecting to arduino")
    print(arduino_port[0])
    arduino = serial.Serial(arduino_port[0], 9600, timeout=1)
    time.sleep(1)
    print(arduino.readline())

def run():
    global db
    global attemps
    global current_status
    global default_settings

    reader = codecs.getreader("ascii")
    log_handler = logging.handlers.WatchedFileHandler('my.log')
    logger = logging.getLogger()
    logger.addHandler(log_handler)
    logger.setLevel(logging.DEBUG)
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--server', default="127.0.0.1")
    args = parser.parse_args()
    clientString = "mongodb://"+args.server+":27017"
    print(clientString)
    client = MongoClient(clientString)
    db = client['speedseed3']
    print(str(db))
    time.sleep(1)
    arduinoConnect()
    i = 0
    current_status = {}
    attemps = 0
    while True:
        time.sleep(0.5)
        expected_status = getExpectedStatus()
        i+=1
        if i == 120 or len(current_status) == 0 :
            getStatus(current_status)
            i=0
        if len(current_status) > 0 and len(expected_status) > 0:
            setExpectedStatus(expected_status, current_status)


run()
